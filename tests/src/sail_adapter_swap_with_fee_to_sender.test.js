import { ethers } from 'ethers';
import { parseEther } from 'ethers/lib/utils';
import 'regenerator-runtime/runtime';
import { waitForAppScreen, zemu, nano_models, genericTx } from './test.fixture';

const contractAddr = '0x8e4005c5a2f85408a95adf7831f9959eda7d87d1';
const chainID = 137; // Polygon

const pluginName = 'changelly';
const testNetwork = 'polygon';
const abi_path = `../networks/${testNetwork}/${pluginName}/abis/` + contractAddr + '.json';
const abi = require(abi_path);

nano_models.forEach(function (model) {
  test(
    '[Nano ' + model.letter + '] sail_adapter_swap_with_fee_to_sender',
    zemu(
      model,
      async (sim, eth) => {
        // sailAdapterSwapWithFee 0x9479c206
        // No recipient value set
        const inputData =
          '0x9479c206000000000000000000000000a32ee1c40594249eb3183c10792bcf573d4da47c0000000000000000000000000000000000000000000000000000000000000120000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f00000000000000000000000000000000000000000000000000000000000f2ed6000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000fc105777a259e5e00000000000000000000000000000000000000000000000000000000000000000000000000000000000000004b66c76f12f145aeedf7f3880c8c6043de616c7a000000000000000000000000000000000000000000000000000000000000136a00000000000000000000000000000000000000000000000000000000000002a4f17a454600000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000337033068a9902b4a75a00000000000000000000000000000000000000000000336307f76e4c92000000000000000000000000000000000c160e4fe967f8ada7b58d9c578267ebbec1e7a63000000000000000000000000000000000000000000000000000000000000022000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000c2132d05d31c914a87c6611c10748aeb04b58e8f00000000000000000000000000000000000000000000000000000000000f2ed6000000000000000000000000c160e4fe967f8ada7b58d9c578267ebbec1e7a63000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000343074ef00000000000000000000000072fa2c72cefa2cd2d49580f6eafb1b9ec5d8a4fc0000000000000000000000000000000000000000000000000000000000000048010203000f0100010200020600000001ff0000000000000000000000000000005b41eedcfc8e0ae47493d4945aa1ae4fe05430ffc2132d05d31c914a87c6611c10748aeb04b58e8f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000eca17e646615053dc2';

        // Get the generic transaction template
        let unsignedTx = genericTx;
        // Adapt to the appropriate network
        unsignedTx.chainId = chainID;
        // Modify `to` to make it interact with the contract
        unsignedTx.to = contractAddr;
        // Modify the attached data
        unsignedTx.data = inputData;

        // Create serializedTx and remove the "0x" prefix
        const serializedTx = ethers.utils.serializeTransaction(unsignedTx).slice(2);
        const tx = eth.signTransaction("44'/60'/0'/0", serializedTx);
        const right_clicks = model.letter === 'S' ? 8 : 6;

        // Wait for the application to actually load and parse the transaction
        await waitForAppScreen(sim);
        // Navigate the display by pressing the right button `right_clicks` times, then pressing both buttons to accept the transaction.
        await sim.navigateAndCompareSnapshots('.', model.name + 'sail_adapter_swap_with_fee_to_sender', [right_clicks, 0]);

        await tx;
      },
      'polygon'
    )
  );
});
